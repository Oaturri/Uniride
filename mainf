from flask import Flask, request, jsonify, render_template, session
from flask_session import Session
import csv

# Modelos
class BaseUsuario:
    def __init__(self, nombre_usuario):
        self.nombre_usuario = nombre_usuario

    def perfil_info(self):
        return f"Perfil de {self.nombre_usuario}"

class Usuario(BaseUsuario):
    def __init__(self, nombre_usuario, contrasena, carnet_estudiantil, opcion):
        super().__init__(nombre_usuario)
        self.contrasena = contrasena
        self.carnet_estudiantil = carnet_estudiantil
        self.opcion = opcion
        self.saldo = 0

    def perfil_info(self):
        return f"Nombre de usuario: {self.nombre_usuario}. Esta es la información básica del perfil."

class RegistroUsuarios:
    def __init__(self, csv_filename='usuarios.csv'):
        self.csv_filename = csv_filename
        self.usuarios = self._cargar_usuarios_desde_csv()

    def _cargar_usuarios_desde_csv(self):
        usuarios = {}
        try:
            with open(self.csv_filename, 'r') as f:
                reader = csv.reader(f)
                for row in reader:
                    if len(row) == 4:
                        nombre_usuario, contrasena, carnet_estudiantil, opcion = row
                        usuarios[nombre_usuario] = Usuario(nombre_usuario, contrasena, carnet_estudiantil, int(opcion))
        except FileNotFoundError:
            pass
        return usuarios

    def agregar_usuario(self, usuario):
        self.usuarios[usuario.nombre_usuario] = usuario
        with open(self.csv_filename, 'a') as f:
            writer = csv.writer(f)
            writer.writerow([usuario.nombre_usuario, usuario.contrasena, usuario.carnet_estudiantil, usuario.opcion])

    def verificar_credenciales(self, nombre_usuario, contrasena):
        usuario = self.usuarios.get(nombre_usuario)
        return usuario and usuario.contrasena == contrasena

class Viaje:
    def __init__(self, hora, lugar_salida, placa, color_carro, cupos, inicio_recorrido, fin_recorrido):
        global id_viaje
        self.id = id_viaje
        self.hora = hora
        self.lugar_salida = lugar_salida
        self.placa = placa
        self.color_carro = color_carro
        self.cupos = cupos
        self.inicio_recorrido = inicio_recorrido
        self.fin_recorrido = fin_recorrido
        id_viaje += 1

viajes = []
id_viaje = 0

def load_last_id():
    global id_viaje
    try:
        with open("id_viaje.txt", "r") as f:
            id_viaje = int(f.read().strip())
    except FileNotFoundError:
        id_viaje = 0

def save_last_id():
    with open("id_viaje.txt", "w") as f:
        f.write(str(id_viaje))

# Aplicación principal
class MainApp:
    def __init__(self):
        load_last_id()

        self.app = Flask(__name__)
        self.app.secret_key = 'una_clave_secreta'
        self.app.config['SESSION_TYPE'] = 'filesystem'
        Session(self.app)

        self.usuarios = RegistroUsuarios()
        self.registrar_rutas()

    def registrar_rutas(self):
        @self.app.route('/')
        def inicio():
            return render_template('inicio.html')

        @self.app.route('/iniciar_sesion', methods=['POST'])
        def iniciar_sesion():
            nombre_usuario = request.form.get('usuario')
            contrasena = request.form.get('contrasena')

            if self.usuarios.verificar_credenciales(nombre_usuario, contrasena):
                session['nombre_usuario'] = nombre_usuario
                return jsonify({"exito": "Inicio de sesión exitoso."})
            else:
                return jsonify({"error": "Nombre de usuario o contraseña incorrectos."}), 401

        @self.app.route('/registro', methods=['GET', 'POST'])
        def registro():
            if request.method == 'POST':
                nombre_usuario = request.form.get('usuario')
                contrasena = request.form.get('contrasena')
                carnet_estudiantil = request.form.get('carnet')
                opcion = int(request.form.get('opcion'))

                if nombre_usuario in self.usuarios.usuarios:
                    return jsonify({"error": "Nombre de usuario ya existe."}), 400

                nuevo_usuario = Usuario(nombre_usuario, contrasena, carnet_estudiantil, opcion)
                self.usuarios.agregar_usuario(nuevo_usuario)
                return jsonify({"exito": "Registro exitoso."})

            return render_template('registro.html')

    def run(self):
        try:
            self.app.run(debug=True)
        finally:
            save_last_id()

if __name__ == '__main__':
    app = MainApp()
    app.run()
